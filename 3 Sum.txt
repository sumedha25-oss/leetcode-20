class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
	//storing triplet in a set as there can be duplicate list of triplets, we want only the unique ones
	//eg I.P: [0,0,0,0,1] 
        Set<List<Integer>> triplet = new HashSet<>();
        List<List<Integer>> triplets = new ArrayList<>();
        Arrays.sort(nums);
        int i,j,k,target=0,sum=0;
        // for(i=0;i<nums.length;i++)
        //     System.out.println(nums[i]);
        for(i=0;i<nums.length;i++)
        {
            j = i+1;
            k = nums.length-1;
            while(j<k){
                sum = nums[i] + nums[j] + nums[k];
                if(sum == target){
                    triplet.add(Arrays.asList(nums[i],nums[j],nums [k]));
                    j++;
                    k--;
                }
                else if(sum>target)
                    k--;
                else if(sum<target)
                    j++;
            }
            
        }
        triplets.addAll(triplet);
        return triplets;
    }
}

/* Got TLE for this 


class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> triplet = new HashSet<>();
        List<List<Integer>> triplets = new ArrayList<>();
        Arrays.sort(nums);
        int i,j,k,target=0,sum=0;
        // for(i=0;i<nums.length;i++)
        //     System.out.println(nums[i]);
        for(i=0;i<nums.length-2;i++)
        {
            for(j=i+1;j<nums.length-1;j++)
            {
                for(k=j+1;k<nums.length;k++)
                {
                    System.out.println(i+" "+j+" "+k);
                        sum = nums[i] + nums[j] + nums[k];
                        if(sum==target)
                        {
                            triplet.add(Arrays.asList(nums[i],nums[j],nums[k]));
                        }
                    
                }
            }
        }
        triplets.addAll(triplet);
        return triplets;
    }
}  */